{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as panda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read input data ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Radius</th>\n",
       "      <th>Real_Magnitude</th>\n",
       "      <th>RF</th>\n",
       "      <th>MLP</th>\n",
       "      <th>SVR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>4.4</td>\n",
       "      <td>3.8950</td>\n",
       "      <td>4.1340</td>\n",
       "      <td>4.2990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.3000</td>\n",
       "      <td>4.3600</td>\n",
       "      <td>4.1300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>500</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.4850</td>\n",
       "      <td>4.4650</td>\n",
       "      <td>4.3580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.4565</td>\n",
       "      <td>4.5332</td>\n",
       "      <td>4.4423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1500</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.4665</td>\n",
       "      <td>4.4793</td>\n",
       "      <td>4.4482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>3000</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.2595</td>\n",
       "      <td>4.4913</td>\n",
       "      <td>4.4260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>5000</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.6415</td>\n",
       "      <td>4.4692</td>\n",
       "      <td>4.5996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Radius  Real_Magnitude      RF     MLP     SVR\n",
       "0     100             4.4  3.8950  4.1340  4.2990\n",
       "1     200             4.4  4.3000  4.3600  4.1300\n",
       "2     500             4.4  4.4850  4.4650  4.3580\n",
       "3    1000             4.4  4.4565  4.5332  4.4423\n",
       "4    1500             4.4  4.4665  4.4793  4.4482\n",
       "5    3000             4.4  4.2595  4.4913  4.4260\n",
       "6    5000             4.4  4.6415  4.4692  4.5996"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputData = panda.read_csv('predictions.csv')\n",
    "inputData"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plots ##"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algorithms' Precision for Each Radius ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "plt.title('Algorithm Precision for each radius')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'RF', data = inputData, marker='o', markerfacecolor='blue', markersize=7, color='skyblue', linewidth=2)\n",
    "plt.plot( 'Radius', 'MLP', data = inputData, marker='o', markerfacecolor='orange', markersize=7, color='red', linewidth=2)\n",
    "plt.plot( 'Radius', 'SVR', data = inputData, marker='o', markerfacecolor='green', markersize=7, color='green', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1ab7334fa08>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Random Forest Classifier')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'RF', data = inputData, marker='o', markerfacecolor='blue', markersize=7, color='skyblue', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Multilayer Perceptron')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'MLP', data = inputData, marker='o', markerfacecolor='orange', markersize=7, color='red', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1ab73259f48>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Support Vector Machines')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'SVR', data = inputData, marker='o', markerfacecolor='blue', markersize=7, color='purple', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()\n",
    "\n",
    "# plt.savefig('magVSradSVM.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Radius Precision for each Algorithm ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      0       1        2          3          4          5  \\\n",
      "Radius          100.000  200.00  500.000  1000.0000  1500.0000  3000.0000   \n",
      "Real_Magnitude    4.400    4.40    4.400     4.4000     4.4000     4.4000   \n",
      "RF                3.895    4.30    4.485     4.4565     4.4665     4.2595   \n",
      "MLP               4.134    4.36    4.465     4.5332     4.4793     4.4913   \n",
      "SVR               4.299    4.13    4.358     4.4423     4.4482     4.4260   \n",
      "\n",
      "                        6  \n",
      "Radius          5000.0000  \n",
      "Real_Magnitude     4.4000  \n",
      "RF                 4.6415  \n",
      "MLP                4.4692  \n",
      "SVR                4.5996  \n"
     ]
    }
   ],
   "source": [
    "inputData_transposed = inputData.transpose()\n",
    "print(inputData_transposed)\n",
    "i = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import preprocessing\n",
    "from sklearn import metrics\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.metrics import mean_squared_error,mean_absolute_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the data and remove Null Values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total data size:  2000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>mag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-39.4322</td>\n",
       "      <td>176.0322</td>\n",
       "      <td>47.62</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-6.0575</td>\n",
       "      <td>147.7634</td>\n",
       "      <td>170.62</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-15.7539</td>\n",
       "      <td>-173.8576</td>\n",
       "      <td>59.82</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-6.5595</td>\n",
       "      <td>143.2629</td>\n",
       "      <td>10.00</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-14.1584</td>\n",
       "      <td>166.5733</td>\n",
       "      <td>25.81</td>\n",
       "      <td>4.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude  longitude   depth  mag\n",
       "0  -39.4322   176.0322   47.62  4.4\n",
       "1   -6.0575   147.7634  170.62  4.2\n",
       "2  -15.7539  -173.8576   59.82  4.6\n",
       "3   -6.5595   143.2629   10.00  4.5\n",
       "4  -14.1584   166.5733   25.81  4.7"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dataset = pd.read_csv('quakes_radius5000.csv')\n",
    "Dataset = Dataset.dropna()\n",
    "print('total data size: ', len(Dataset))\n",
    "Dataset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract X_train, Y_train, X_test and Y_test ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1600, 3), (1600,), (400, 3), (400,))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=Dataset.iloc[:,:-1].values\n",
    "y=Dataset.iloc[:,-1].values\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X,y, test_size= 0.20, random_state=42)\n",
    "X_train.shape,Y_train.shape,X_test.shape,Y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RFC ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4360152728116304\n",
      "[4.566]\n",
      "[4.358]\n",
      "[4.4415]\n",
      "[4.4415]\n",
      "[4.4415]\n",
      "[4.4415]\n",
      "[4.4415]\n"
     ]
    }
   ],
   "source": [
    "random_forest = RandomForestRegressor(n_estimators=200,random_state=0)\n",
    "random_forest.fit(X_train, Y_train)\n",
    "y_pred = random_forest.predict(X_test)\n",
    "rmse = np.sqrt(metrics.mean_squared_error(Y_test,y_pred))\n",
    "print(rmse)\n",
    "\n",
    "# Use only that one whose Dataset is loaded\n",
    "\n",
    "y_pred100 = random_forest.predict([[-38.68,175.82,103]])\n",
    "print(y_pred100)\n",
    "\n",
    "y_pred200 = random_forest.predict([[-38.2138,176.0145,197.25]])\n",
    "print(y_pred200)\n",
    "\n",
    "y_pred500 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred500)\n",
    "\n",
    "y_pred1000 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1000)\n",
    "\n",
    "y_pred1500 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1500)\n",
    "\n",
    "y_pred3000 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred3000)\n",
    "\n",
    "y_pred5000 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred5000)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MLP ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4289790064267135\n",
      "[4.81474581]\n",
      "[4.71208207]\n",
      "[4.76925336]\n",
      "[4.76925336]\n",
      "[4.76925336]\n",
      "[4.76925336]\n",
      "[4.76925336]\n"
     ]
    }
   ],
   "source": [
    "mlp = MLPRegressor(hidden_layer_sizes=200,activation='tanh',random_state=0,solver='sgd')\n",
    "mlp.fit(X_train, Y_train)\n",
    "y_pred = mlp.predict(X_test)\n",
    "rmse = np.sqrt(metrics.mean_squared_error(Y_test,y_pred))\n",
    "print(rmse)\n",
    "\n",
    "# Use only that one whose Dataset is loaded\n",
    "\n",
    "y_pred100 = mlp.predict([[-38.68,175.82,103]])\n",
    "print(y_pred100)\n",
    "\n",
    "y_pred200 = mlp.predict([[-38.2138,176.0145,197.25]])\n",
    "print(y_pred200)\n",
    "\n",
    "y_pred500 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred500)\n",
    "\n",
    "y_pred1000 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1000)\n",
    "\n",
    "y_pred1500 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1500)\n",
    "\n",
    "y_pred3000 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred3000)\n",
    "\n",
    "y_pred5000 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred5000)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Support Vector Machines ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Akash\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4490749291722009\n",
      "[4.5263847]\n",
      "[4.5263847]\n",
      "[4.49966456]\n",
      "[4.49966456]\n",
      "[4.49966456]\n",
      "[4.49966456]\n",
      "[4.49966456]\n"
     ]
    }
   ],
   "source": [
    "svr=SVR(kernel='rbf')\n",
    "svr.fit(X_train,Y_train)\n",
    "y_pred = svr.predict(X_test)\n",
    "rmse = np.sqrt(metrics.mean_squared_error(Y_test,y_pred))\n",
    "print(rmse)\n",
    "\n",
    "# Use only that one whose Dataset is loaded\n",
    "\n",
    "y_pred100 = svr.predict([[-38.68,175.82,103]])\n",
    "print(y_pred100)\n",
    "\n",
    "y_pred200 = svr.predict([[-38.2138,176.0145,197.25]])\n",
    "print(y_pred200)\n",
    "\n",
    "y_pred500 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred500)\n",
    "\n",
    "y_pred1000 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1000)\n",
    "\n",
    "y_pred1500 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1500)\n",
    "\n",
    "y_pred3000 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred3000)\n",
    "\n",
    "y_pred5000 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred5000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as panda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read input data ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Radius</th>\n",
       "      <th>Real_Magnitude</th>\n",
       "      <th>RF</th>\n",
       "      <th>MLP</th>\n",
       "      <th>SVR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>4.4</td>\n",
       "      <td>3.8950</td>\n",
       "      <td>4.1340</td>\n",
       "      <td>4.2990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.3000</td>\n",
       "      <td>4.3600</td>\n",
       "      <td>4.1300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>500</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.4850</td>\n",
       "      <td>4.4650</td>\n",
       "      <td>4.3580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.4565</td>\n",
       "      <td>4.5332</td>\n",
       "      <td>4.4423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1500</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.4665</td>\n",
       "      <td>4.4793</td>\n",
       "      <td>4.4482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>3000</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.2595</td>\n",
       "      <td>4.4913</td>\n",
       "      <td>4.4260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>5000</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.6415</td>\n",
       "      <td>4.4692</td>\n",
       "      <td>4.5996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Radius  Real_Magnitude      RF     MLP     SVR\n",
       "0     100             4.4  3.8950  4.1340  4.2990\n",
       "1     200             4.4  4.3000  4.3600  4.1300\n",
       "2     500             4.4  4.4850  4.4650  4.3580\n",
       "3    1000             4.4  4.4565  4.5332  4.4423\n",
       "4    1500             4.4  4.4665  4.4793  4.4482\n",
       "5    3000             4.4  4.2595  4.4913  4.4260\n",
       "6    5000             4.4  4.6415  4.4692  4.5996"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputData = panda.read_csv('predictions.csv')\n",
    "inputData"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plots ##"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algorithms' Precision for Each Radius ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20442d3af88>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "plt.title('Algorithm Precision for each radius')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'RF', data = inputData, marker='o', markerfacecolor='skyblue', markersize=7, color='skyblue', linewidth=2)\n",
    "plt.plot( 'Radius', 'MLP', data = inputData, marker='o', markerfacecolor='red', markersize=7, color='red', linewidth=2)\n",
    "plt.plot( 'Radius', 'SVR', data = inputData, marker='o', markerfacecolor='blue', markersize=7, color='blue', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20442dc4888>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Random Forest')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'RF', data = inputData, marker='o', markerfacecolor='skyblue', markersize=7, color='skyblue', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x204433036c8>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Multilayer Perceptron')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'MLP', data = inputData, marker='o', markerfacecolor='red', markersize=7, color='red', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2044447ffc8>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Support Vector Machines')\n",
    "plt.xlabel('Radius')\n",
    "plt.ylabel('Magnitude')\n",
    "plt.plot( 'Radius', 'SVR', data = inputData, marker='o', markerfacecolor='blue', markersize=7, color='blue', linewidth=2)\n",
    "plt.plot( 'Radius', 'Real_Magnitude', data = inputData, linestyle='dashed', color='green', linewidth=2)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Radius Precision for each Algorithm ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      0       1        2          3          4          5  \\\n",
      "Radius          100.000  200.00  500.000  1000.0000  1500.0000  3000.0000   \n",
      "Real_Magnitude    4.400    4.40    4.400     4.4000     4.4000     4.4000   \n",
      "RF                3.895    4.30    4.485     4.4565     4.4665     4.2595   \n",
      "MLP               4.134    4.36    4.465     4.5332     4.4793     4.4913   \n",
      "SVR               4.299    4.13    4.358     4.4423     4.4482     4.4260   \n",
      "\n",
      "                        6  \n",
      "Radius          5000.0000  \n",
      "Real_Magnitude     4.4000  \n",
      "RF                 4.6415  \n",
      "MLP                4.4692  \n",
      "SVR                4.5996  \n"
     ]
    }
   ],
   "source": [
    "inputData_transposed = inputData.transpose()\n",
    "print(inputData_transposed)\n",
    "i = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import preprocessing\n",
    "from sklearn import metrics\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.metrics import mean_squared_error,mean_absolute_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the data and remove Null Values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total data size:  2000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>mag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-39.4322</td>\n",
       "      <td>176.0322</td>\n",
       "      <td>47.62</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-6.0575</td>\n",
       "      <td>147.7634</td>\n",
       "      <td>170.62</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-15.7539</td>\n",
       "      <td>-173.8576</td>\n",
       "      <td>59.82</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-6.5595</td>\n",
       "      <td>143.2629</td>\n",
       "      <td>10.00</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-14.1584</td>\n",
       "      <td>166.5733</td>\n",
       "      <td>25.81</td>\n",
       "      <td>4.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude  longitude   depth  mag\n",
       "0  -39.4322   176.0322   47.62  4.4\n",
       "1   -6.0575   147.7634  170.62  4.2\n",
       "2  -15.7539  -173.8576   59.82  4.6\n",
       "3   -6.5595   143.2629   10.00  4.5\n",
       "4  -14.1584   166.5733   25.81  4.7"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dataset = pd.read_csv('radius/quakes_radius5000.csv')\n",
    "Dataset = Dataset.dropna()\n",
    "print('total data size: ', len(Dataset))\n",
    "Dataset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract X_train, Y_train, X_test and Y_test ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1600, 3), (1600,), (400, 3), (400,))"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=Dataset.iloc[:,:-1].values\n",
    "y=Dataset.iloc[:,-1].values\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X,y, test_size= 0.20, random_state=42)\n",
    "X_train.shape,Y_train.shape,X_test.shape,Y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4360152728116304\n"
     ]
    }
   ],
   "source": [
    "random_forest = RandomForestRegressor(n_estimators=200,random_state=0)\n",
    "random_forest.fit(X_train, Y_train)\n",
    "y_pred = random_forest.predict(X_test)\n",
    "rmse = np.sqrt(metrics.mean_squared_error(Y_test,y_pred))\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RF prediction for Magnitude 4.4 \n",
    "### Use only that one whose radius Dataset is loaded and comment others\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.566]\n",
      "[4.358]\n",
      "[4.4415]\n",
      "[4.4415]\n",
      "[4.4415]\n",
      "[4.4415]\n",
      "[4.4415]\n"
     ]
    }
   ],
   "source": [
    "y_pred100 = random_forest.predict([[-38.68,175.82,103]])\n",
    "print(y_pred100)\n",
    "\n",
    "y_pred200 = random_forest.predict([[-38.2138,176.0145,197.25]])\n",
    "print(y_pred200)\n",
    "\n",
    "y_pred500 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred500)\n",
    "\n",
    "y_pred1000 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1000)\n",
    "\n",
    "y_pred1500 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1500)\n",
    "\n",
    "y_pred3000 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred3000)\n",
    "\n",
    "y_pred5000 = random_forest.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred5000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multi Layer Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4289790064267135\n"
     ]
    }
   ],
   "source": [
    "mlp = MLPRegressor(hidden_layer_sizes=200,activation='tanh',random_state=0,solver='sgd')\n",
    "mlp.fit(X_train, Y_train)\n",
    "y_pred = mlp.predict(X_test)\n",
    "rmse = np.sqrt(metrics.mean_squared_error(Y_test,y_pred))\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MLP prediction for Magnitude 4.4 \n",
    "### Use only that one whose radius Dataset is loaded and comment others"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.81474581]\n",
      "[4.71208207]\n",
      "[4.76925336]\n",
      "[4.76925336]\n",
      "[4.76925336]\n",
      "[4.76925336]\n",
      "[4.76925336]\n"
     ]
    }
   ],
   "source": [
    "y_pred100 = mlp.predict([[-38.68,175.82,103]])\n",
    "print(y_pred100)\n",
    "\n",
    "y_pred200 = mlp.predict([[-38.2138,176.0145,197.25]])\n",
    "print(y_pred200)\n",
    "\n",
    "y_pred500 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred500)\n",
    "\n",
    "y_pred1000 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1000)\n",
    "\n",
    "y_pred1500 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1500)\n",
    "\n",
    "y_pred3000 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred3000)\n",
    "\n",
    "y_pred5000 = mlp.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred5000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Support Vector Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4490749291722009\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Akash\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "svr=SVR(kernel='rbf')\n",
    "svr.fit(X_train,Y_train)\n",
    "y_pred = svr.predict(X_test)\n",
    "rmse = np.sqrt(metrics.mean_squared_error(Y_test,y_pred))\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SVR prediction for Magnitude 4.4 \n",
    "### Use only that one whose radius Dataset is loaded and comment others"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.5263847]\n",
      "[4.5263847]\n",
      "[4.49966456]\n",
      "[4.49966456]\n",
      "[4.49966456]\n",
      "[4.49966456]\n",
      "[4.49966456]\n"
     ]
    }
   ],
   "source": [
    "y_pred100 = svr.predict([[-38.68,175.82,103]])\n",
    "print(y_pred100)\n",
    "\n",
    "y_pred200 = svr.predict([[-38.2138,176.0145,197.25]])\n",
    "print(y_pred200)\n",
    "\n",
    "y_pred500 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred500)\n",
    "\n",
    "y_pred1000 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1000)\n",
    "\n",
    "y_pred1500 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred1500)\n",
    "\n",
    "y_pred3000 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred3000)\n",
    "\n",
    "y_pred5000 = svr.predict([[-39.4322,176.0322,47.62]])\n",
    "print(y_pred5000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
